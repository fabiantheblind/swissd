var pw      = 200,     ph      = 200,    // font    = 'Futura	Condensed ExtraBold',    // font = 'DINPro	Black',    font = 'Dezen Pro	_Heavy',    first_line = 'Alien',    second_line = 'Summer',    third_line = "The Toxic Avenger - Redial Remix";    var doc = app.documents.add({    documentPreferences: {        pageWidth: pw,        pageHeight: ph,        facingPages: false    }});var page = doc.pages.firstItem();// set the boundspage.marginPreferences.properties = {    top: 55,    bottom: 20,    left: 40,    right: 40};// get the boundsvar top     = page.marginPreferences.top;var left    = page.marginPreferences.left;var right   = pw - page.marginPreferences.right;var bottom  = ph - page.marginPreferences.bottom;var box_width = pw - page.marginPreferences.right - page.marginPreferences.left;var bg = page.rectangles.add({    geometricBounds: [0, 0, ph, pw],    fillColor: doc.swatches.item(7),    strokeWeight: 0});var tf = page.textFrames.add({    geometricBounds: [top, left, bottom, right],    contents: first_line});var p = tf.paragraphs.firstItem();p.properties = {    appliedFont: font,    fillColor: doc.swatches.item(2),    fillTint: 80 };// change content to uppercasep.changecase(ChangecaseMode.UPPERCASE);// convert to outlines and scale width to max.var outlines = tf.createOutlines();var poly = page.polygons.firstItem();var poly_height = poly.geometricBounds[2] - poly.geometricBounds[0];var poly_width = poly.geometricBounds[3] - poly.geometricBounds[1];var width_multiplier = box_width / poly_width;poly.resize(CoordinateSpaces.PAGE_COORDINATES, AnchorPoint.TOP_LEFT_ANCHOR, ResizeMethods.MULTIPLYING_CURRENT_DIMENSIONS_BY, [width_multiplier, width_multiplier]);var tf2 = page.textFrames.add({    geometricBounds: [top, left, bottom, right],    contents: second_line});var p2 = tf2.paragraphs.firstItem();p2.properties = {    appliedFont: font,    fillColor: doc.swatches.item(2),    fillTint: 80};// change content to uppercasep2.changecase(ChangecaseMode.UPPERCASE);// convert to outlines and scale width to max.tf2.createOutlines();var poly2 = page.polygons.item(0);var poly2_height = poly2.geometricBounds[2] - poly2.geometricBounds[0];var poly2_width = poly2.geometricBounds[3] - poly2.geometricBounds[1];var width_multiplier2 = box_width / poly2_width;poly2.resize(CoordinateSpaces.PAGE_COORDINATES, AnchorPoint.TOP_LEFT_ANCHOR, ResizeMethods.MULTIPLYING_CURRENT_DIMENSIONS_BY, [width_multiplier2, width_multiplier2]);var poly_pos = poly.resolve(AnchorPoint.TOP_LEFT_ANCHOR, CoordinateSpaces.PAGE_COORDINATES);// wtf, why is poly_pos not an array?poly_pos = poly_pos.toString().split(',');poly_height = (poly.geometricBounds[2] - poly.geometricBounds[0]);poly2.move([left, top + poly_height + 2]);var poly2_height = (poly2.geometricBounds[2] - poly2.geometricBounds[0]);var line = page.rectangles.add({    geometricBounds:[top + poly_height + poly2_height + 5, left, top + poly_height + poly2_height + 7, right],    fillColor: doc.swatches.item(3),    strokeWeight: 0,    fillTint: 90,}); var tf3 = page.textFrames.add({    geometricBounds: [top, left, bottom, right],    contents: third_line});var p3 = tf3.paragraphs.firstItem();p3.properties = {    appliedFont: font,    fillColor: doc.swatches.item(2),    fillTint: 80};// change content to uppercasep3.changecase(ChangecaseMode.UPPERCASE);// convert to outlines and scale width to max.tf3.createOutlines();var poly3 = page.polygons.item(0);var poly3_height = poly3.geometricBounds[2] - poly3.geometricBounds[0];var poly3_width = poly3.geometricBounds[3] - poly3.geometricBounds[1];var width_multiplier3 = box_width / poly3_width;poly3.resize(CoordinateSpaces.PAGE_COORDINATES, AnchorPoint.TOP_LEFT_ANCHOR, ResizeMethods.MULTIPLYING_CURRENT_DIMENSIONS_BY, [width_multiplier3, width_multiplier3]);var poly_pos3 = poly2.resolve(AnchorPoint.TOP_LEFT_ANCHOR, CoordinateSpaces.PAGE_COORDINATES);// wtf, why is poly_pos not an array?poly_pos3 = poly_pos3.toString().split(',');var poly_height3 = (poly2.geometricBounds[2] - poly2.geometricBounds[0]);poly3.move([left, top + poly_height3 + poly_height + 10]);// select all// page.polygons.everyItem().select(SelectionOptions.ADD_TO);var poly_group = [];poly_group.push(page.polygons.item(0));poly_group.push(page.polygons.item(1));poly_group.push(page.polygons.item(2));poly_group.push(page.rectangles.item(0));page.groups.add(poly_group);var group = page.groups.firstItem();//~ group.duplicate([left + 1, top + 1]).sendBackward();//~ var duplicated = page.groups.lastItem();//~ duplicated.polygons.everyItem().properties = {//~     fillColor: doc.swatches.item(1),//~     fillTint: 100//~ }//~ duplicated.rectangles.everyItem().properties = {//~     fillColor: doc.swatches.item(1),//~     fillTint: 100//~ }// shear-matrixvar myShearMatrix = app.transformationMatrices.add();myShearMatrix = myShearMatrix.shearMatrix(15);group.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.centerAnchor, myShearMatrix);   // duplicated.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.centerAnchor, myShearMatrix);   // rotate-matrixvar myRotateMatrix = app.transformationMatrices.add();myRotateMatrix = myRotateMatrix.rotateMatrix(15);group.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.centerAnchor, myRotateMatrix);// duplicated.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.centerAnchor, myRotateMatrix);"woosh.";